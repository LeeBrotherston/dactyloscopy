package dactyloscopy

// Type for json fingerprint in the fingerprints JSON file
// Names much be uppercase to make this work and the `json:"name"`
// maps them back to the names contained in the file for compatibility
// with fingerprintls.
type FingerprintFile struct {
	ID                float64 `json:"id"`
	Desc              string  `json:"desc"`
	RecordTLSVersion  string  `json:"record_tls_version"`
	TLSVersion        string  `json:"tls_version"`
	CiphersuiteLength string  `json:"ciphersuite_length"`
	Ciphersuite       string  `json:"ciphersuite"`
	CompressionLength string  `json:"compression_length"`
	Compression       string  `json:"compression"`
	Extensions        string  `json:"extensions"`
	ECurves           string  `json:"e_curves"`
	SigAlg            string  `json:"sig_alg"`
	ECPointFmt        string  `json:"ec_point_fmt"`
	Grease            bool    `json:"grease"`
	Hash              uint64  `json:"hash"`
}

// Fingerprint management... almost the same as fingerprintFile.  maybe
// they can be combined in the future.
type Fingerprint struct {
	id               float64 //`json:"id"`
	desc             string  //`json:"desc"`
	recordTLSVersion []byte  //`json:"record_tls_version"`
	TLSVersion       []byte  //`json:"tls_version"`
	ciphersuite      []byte  //`json:"ciphersuite"`
	compression      []byte  //`json:"compression"`
	extensions       []byte  //`json:"extensions"`
	eCurves          []byte  //`json:"e_curves"`
	sigAlg           []byte  //`json:"sig_alg"`
	ecPointFmt       []byte  //`json:"ec_point_fmt"`
	grease           bool
	hash             uint64
}

// FingerprintOutput contains data generated by the fingerprinTLS() func
type FingerprintOutput struct {
	FingerprintName string // The human readable name for the fingerprint, intended for log output, etc
	Hostname        []byte // Destination hostname as taken from the SNI
	Destination     []byte
}
